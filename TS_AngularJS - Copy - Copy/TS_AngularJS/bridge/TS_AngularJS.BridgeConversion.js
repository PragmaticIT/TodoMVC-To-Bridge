/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2018
 * @compiler Bridge.NET 17.4.0
 */
Bridge.assembly("TS_AngularJS.BridgeConversion", function ($asm, globals) {
    "use strict";

    require(["angular"], function (angular) {
        Bridge.define("TS_AngularJS.BridgeConversion.App", {
            main: function Main () {
                var $t, $t1, $t2, $t3;
                System.Console.WriteLine("Welcome to Bridge.NET");
    
                var app = angular.module("todomvc", System.Array.init([], System.String));
    
    
    
                app.controller("test1", new Array("$scope", ($t3 = ($t = { ntype: 38, t: System.Array.type(System.Object), n: "args" }, ($t2 = { ntype: 10, t: Bridge.virtualc("angular.IController"), operand: ($t1 = {"td":Bridge.virtualc("TS_AngularJS.BridgeConversion.TestCtrl"),"a":2,"n":".ctor","t":1,"p":[System.Object],"pi":[{"n":"scope","pt":System.Object,"ps":0}],"sn":"ctor"}, { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([{ ntype: 44, t: System.Object, operand: { ntype: 5, t: System.Object, left: $t, right: { ntype: 9, t: System.Int32, value: 0 } } }]) }) }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) })), ($t3.body.t[$t3.body.constructor.sn] || $t3.body.t))));
    
                angular.bootstrap(document, new Array("todomvc"));
    
            }
        });
        Bridge.init();
    });
});

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJUU19Bbmd1bGFySlMuQnJpZGdlQ29udmVyc2lvbi5qcyIsCiAgInNvdXJjZVJvb3QiOiAiIiwKICAic291cmNlcyI6IFsiQXBwLmNzIl0sCiAgIm5hbWVzIjogWyIiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Z0JBWVlBOztnQkFFQUEsVUFBVUEsMEJBQW1DQTs7OztnQkFnQjdDQSx3QkFBd0JBLElBQUlBLGdCQUV4QkEsQUFBa0RBLE9BQWlGQTs7Z0JBR3ZJQSxrQkFDSUEsVUFDQUEsSUFBSUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsidXNpbmcgQnJpZGdlO1xyXG51c2luZyBOZXd0b25zb2Z0Lkpzb247XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgUmV0eXBlZDtcclxuXHJcbm5hbWVzcGFjZSBUU19Bbmd1bGFySlMuQnJpZGdlQ29udmVyc2lvblxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQXBwXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1haW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gV3JpdGUgYSBtZXNzYWdlIHRvIHRoZSBDb25zb2xlXHJcbiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKFwiV2VsY29tZSB0byBCcmlkZ2UuTkVUXCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFwcCA9IGFuZ3VsYXIuYW5ndWxhcjMubW9kdWxlKFwidG9kb212Y1wiLCBuZXcgc3RyaW5nW10geyB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vdGhpcyBvbmUgd29ya3MgYnV0IGlzIHVnbHk6XHJcbiAgICAgICAgICAgIC8vdmFyIHRvZG9DdHJsQ29uc3RydWN0b3IgPSBuZXcgZXM1LkFycmF5PFVuaW9uPHN0cmluZywgSUNvbnRyb2xsZXJDb25zdHJ1Y3Rvcj4+KFxyXG4gICAgICAgICAgICAvLyAgICAgICAgXCIkaHR0cFwiLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgXCIkdGltZW91dFwiLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgICAgICAgLy8gICAgICAgIChJQ29udHJvbGxlckNvbnN0cnVjdG9yKShuZXcgSUNvbnRyb2xsZXJDb25zdHJ1Y3RvckN0b3JGbigob2JqZWN0W10gYXJncykgPT5cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5ldyBUb2RvQ3RybChcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0uQXM8SUh0dHBTZXJ2aWNlPigpLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgYXJnc1sxXS5BczxJVGltZW91dFNlcnZpY2U+KCksXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBhcmdzWzJdLkFzPElUb2RvQ3RybFNjb3BlPigpKSlcclxuICAgICAgICAgICAgLy8pKTtcclxuXHJcbiAgICAgICAgICAgIC8vYXBwLmNvbnRyb2xsZXIoXCJ0b2RvQ3RybFwiLCB0b2RvQ3RybENvbnN0cnVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGFwcC5jb250cm9sbGVyKFwidGVzdDFcIiwgbmV3IGVzNS5BcnJheTxVbmlvbjxzdHJpbmcsIFJldHlwZWQuYW5ndWxhci5hbmd1bGFyMi5JQ29udHJvbGxlckNvbnN0cnVjdG9yPj4oXHJcbiAgICAgICAgICAgICAgICBcIiRzY29wZVwiLFxyXG4gICAgICAgICAgICAgICAgKFJldHlwZWQuYW5ndWxhci5hbmd1bGFyMi5JQ29udHJvbGxlckNvbnN0cnVjdG9yKShuZXcgUmV0eXBlZC5hbmd1bGFyLmFuZ3VsYXIyLklDb250cm9sbGVyQ29uc3RydWN0b3IuSUNvbnRyb2xsZXJDb25zdHJ1Y3RvckN0b3JGbigob2JqZWN0W10gYXJncykgPT4gbmV3IFRlc3RDdHJsKGFyZ3NbMF0gYXMgVGVzdEN0cmxTY29wZSkpKVxyXG4gICAgICAgICAgICAgICAgKSk7XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmFuZ3VsYXIzLmJvb3RzdHJhcChcclxuICAgICAgICAgICAgICAgIEJyaWRnZS5IdG1sNS5Eb2N1bWVudC5JbnN0YW5jZS5Bczxkb20uRWxlbWVudD4oKSxcclxuICAgICAgICAgICAgICAgIG5ldyBlczUuQXJyYXk8c3RyaW5nPihcInRvZG9tdmNcIilcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBbVmlydHVhbF1cclxuICAgIFtPYmplY3RMaXRlcmFsXVxyXG4gICAgcHVibGljIGFic3RyYWN0IGNsYXNzIFRlc3RDdHJsU2NvcGUgOiBSZXR5cGVkLmFuZ3VsYXIuYW5ndWxhcjIuSVNjb3BlXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgX2dyZWV0aW5nID0gXCJncmVldGluZ1wiO1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgZ3JlZXRpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfZ3JlZXRpbmc7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9ncmVldGluZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IEhlaWdodCB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGludCBoZWlnaHQgeyBnZXQ7IHNldDsgfVxyXG4gICAgfVxyXG4gICAgW1ZpcnR1YWxdXHJcbiAgICBwdWJsaWMgY2xhc3MgVGVzdEN0cmwgOiBSZXR5cGVkLmFuZ3VsYXIuYW5ndWxhcjIuSUNvbnRyb2xsZXJcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIFRlc3RDdHJsU2NvcGUgX3Njb3BlO1xyXG5cclxuICAgICAgICBwdWJsaWMgVGVzdEN0cmwoVGVzdEN0cmxTY29wZSBzY29wZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9zY29wZSA9IHNjb3BlO1xyXG4gICAgICAgICAgICBfc2NvcGUuZ3JlZXRpbmcgPSBcIllvIVwiO1xyXG4gICAgICAgICAgICBfc2NvcGUuSGVpZ2h0ID0gMTAwO1xyXG4gICAgICAgICAgICBfc2NvcGUuaGVpZ2h0ID0gMjAwO1xyXG4gICAgICAgICAgICBfc2NvcGUuX2FwcGx5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9wdWJsaWMgY2xhc3MgVG9kb0N0cmwgOiBJQ29udHJvbGxlclxyXG4gICAgLy97XHJcbiAgICAvLyAgICBwcml2YXRlIHJlYWRvbmx5IElIdHRwU2VydmljZSBfaHR0cFNlcnZpY2U7XHJcbiAgICAvLyAgICBwcml2YXRlIHJlYWRvbmx5IElUaW1lb3V0U2VydmljZSBfdGltZU91dFNlcnZpY2U7XHJcbiAgICAvLyAgICBwcml2YXRlIHJlYWRvbmx5IElUb2RvQ3RybFNjb3BlIF9zY29wZTtcclxuXHJcbiAgICAvLyAgICBwdWJsaWMgVG9kb0N0cmwoSUh0dHBTZXJ2aWNlIGh0dHBTZXJ2aWNlLCBJVGltZW91dFNlcnZpY2UgdGltZW91dFNlcnZpY2UsIElUb2RvQ3RybFNjb3BlIHNjb3BlKVxyXG4gICAgLy8gICAge1xyXG4gICAgLy8gICAgICAgIF9odHRwU2VydmljZSA9IGh0dHBTZXJ2aWNlO1xyXG4gICAgLy8gICAgICAgIF90aW1lT3V0U2VydmljZSA9IHRpbWVvdXRTZXJ2aWNlO1xyXG4gICAgLy8gICAgICAgIF9zY29wZSA9IHNjb3BlO1xyXG5cclxuICAgIC8vICAgICAgICBfc2NvcGUuSGVpZ2h0ID0gNDA7XHJcblxyXG4gICAgLy8gICAgICAgIF90aW1lT3V0U2VydmljZS5TZWxmKDIwMDApLnRoZW48UmV0eXBlZC5QcmltaXRpdmUuVm9pZCwgUmV0eXBlZC5QcmltaXRpdmUuVm9pZD4oKGFyZykgPT5cclxuICAgIC8vICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKFwidGltZW91dC4uLlwiKTtcclxuICAgIC8vICAgICAgICAgICAgX3Njb3BlLkhlaWdodCA9IDEwMDA7XHJcbiAgICAvLyAgICAgICAgICAgIF9zY29wZS5fYXBwbHkoKTtcclxuICAgIC8vICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAvLyAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgQnJpZGdlLkh0bWw1LldpbmRvdy5JbnN0YW5jZS5BczxJSGFzU2NvcGVTcHk+KCkuU3B5ID0gX3Njb3BlO1xyXG4gICAgLy8gICAgfVxyXG4gICAgLy99XHJcbiAgICAvL3B1YmxpYyBpbnRlcmZhY2UgSUhhc1Njb3BlU3B5XHJcbiAgICAvL3tcclxuICAgIC8vICAgIG9iamVjdCBTcHkgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgIC8vfVxyXG4gICAgLy9wdWJsaWMgYWJzdHJhY3QgY2xhc3MgSVRvZG9DdHJsU2NvcGUgOiBJU2NvcGVcclxuICAgIC8ve1xyXG4gICAgLy8gICAgW0ZpZWxkXVxyXG4gICAgLy8gICAgcHVibGljIGludCBXaWR0aCB7IGdldDsgc2V0OyB9XHJcbiAgICAvLyAgICBbRmllbGRdXHJcbiAgICAvLyAgICBwdWJsaWMgaW50IEhlaWdodCB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgLy99XHJcbn1cclxuIl0KfQo=
